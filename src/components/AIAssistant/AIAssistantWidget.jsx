import { useState } from "react";
import styles from "./AIAssistantWidget.module.css";
import { FaRobot, FaTimes } from "react-icons/fa";
import { sendMessageToAI } from "../../api/aiApi";
import DotLoader from "../Loader/DotLoader";

function AIAssistantWidget() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      sender: "ai",
      text:
        "–í—ñ—Ç–∞—é! –Ø —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ AI-–±–æ–ª—ñ—Ç ü§ñ.\n\n" +
        "–Ø –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –Ω–µ—Å–∫–ª–∞–¥–Ω—ñ –º–µ–¥–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞–¥–∞—Ç–∏ –ø–æ—Ä–∞–¥–∏ —á–∏ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—î—é —É —Å–µ—Ä–≤—ñ—Å—ñ.\n\n" +
        "‚ö†Ô∏è –ü—Ä–æ—Ç–µ —è –Ω–µ —î –ª—ñ–∫–∞—Ä–µ–º, —ñ –∂–æ–¥–Ω–∞ –º–æ—è –ø–æ—Ä–∞–¥–∞ –Ω–µ –º–æ–∂–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º.",
    },
  ]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const toggleWidget = () => {
    setIsOpen((prev) => !prev);
  };

  const handleSend = async () => {
    const trimmed = input.trim();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–æ–≤–∂–∏–Ω–∏
    if (trimmed.length < 2) {
      setError("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 —Å–∏–º–≤–æ–ª–∏.");
      return;
    }
    if (trimmed.length > 1000) {
      setError("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 1000 —Å–∏–º–≤–æ–ª—ñ–≤.");
      return;
    }

    setError(""); // –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–º–∏–ª–æ–∫
    const userMessage = { sender: "user", text: trimmed };

    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setLoading(true);

    try {
      const aiReply = await sendMessageToAI(trimmed);
      const aiMessage = { sender: "ai", text: aiReply };
      setMessages((prev) => [...prev, aiMessage]);
    } catch (error) {
      setMessages((prev) => [
        ...prev,
        { sender: "ai", text: "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI." },
      ]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      {isOpen && (
        <div className={`${styles.chatBox} ${styles.fadeIn}`}>
          <div className={styles.header}>
            <span>ü§ñ –ü–æ–º—ñ—á–Ω–∏–∫ AI-–±–æ–ª—ñ—Ç</span>
            <button onClick={toggleWidget} className={styles.closeButton}>
              <FaTimes />
            </button>
          </div>

          <div className={styles.messages}>
            {messages.map((msg, i) => (
              <div
                key={i}
                className={
                  msg.sender === "user" ? styles.userMessage : styles.aiMessage
                }
              >
                {msg.text}
              </div>
            ))}
            {loading && (
              <div className={styles.aiMessage}>
                <DotLoader />
              </div>
            )}
          </div>

          <div className={styles.inputArea}>
            <input
              type="text"
              placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
              disabled={loading}
            />
            <button onClick={handleSend} disabled={loading}>
              –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
            </button>
          </div>

          {error && <div className={styles.error}>{error}</div>}
        </div>
      )}

      {!isOpen && (
        <button onClick={toggleWidget} className={styles.floatingButton}>
          <FaRobot size={20} />
          <span className={styles.label}>–ß–∞—Ç –∑ AI</span>
        </button>
      )}
    </div>
  );
}

export default AIAssistantWidget;
