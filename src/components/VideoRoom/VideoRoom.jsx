import { useEffect, useRef, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { checkCallAccess } from "../../api/callApi";
import { socket } from "../../api/socket";
import { toast } from "react-toastify";
import styles from "./VideoRoom.module.css";

const servers = {
  iceServers: [
    { urls: "stun:stun.l.google.com:19302" },
    { urls: "stun:stun1.l.google.com:19302" },
  ],
};

const VideoRoom = () => {
  const { callId } = useParams();
  const navigate = useNavigate();
  const [currentRole, setCurrentRole] = useState(null);
  const [cameraEnabled, setCameraEnabled] = useState(true);
  const [micEnabled, setMicEnabled] = useState(true);
  const [localStream, setLocalStream] = useState(null);
  const [remoteStream, setRemoteStream] = useState(null);
  const pcRef = useRef(null);
  const [isRemoteConnected, setIsRemoteConnected] = useState(false);

  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);

  useEffect(() => {
    const checkAccess = async () => {
      try {
        const res = await checkCallAccess(callId);
        setCurrentRole(res.role);
        console.log("‚úÖ –î–æ—Å—Ç—É–ø –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –†–æ–ª—å:", res.role);
      } catch (err) {
        alert("–î–æ—Å—Ç—É–ø –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.");
        navigate("/");
      }
    };
    checkAccess();
  }, [callId, navigate]);

  useEffect(() => {
    if (!currentRole) return;

    const pc = new RTCPeerConnection(servers);
    pcRef.current = pc;
    const stream = new MediaStream();
    setRemoteStream(stream);

    const start = async () => {
      try {
        const local = await navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true,
        });
        setLocalStream(local);
        local.getTracks().forEach((track) => {
          console.log(`üé• –î–æ–¥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ç—Ä–µ–∫: ${track.kind}`);
          pc.addTrack(track, local);
        });

        localVideoRef.current.srcObject = local;
        console.log("üé¨ –õ–æ–∫–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
      } catch (err) {
        console.error("üö´ –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–º–µ—Ä–∏/–º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞:", err);
      }

      socket.emit("join-room", { callId });
      console.log(`üö™ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ join-room ‚Üí callId: ${callId}`);
    };

    pc.onicecandidate = (event) => {
      if (event.candidate) {
        console.log("üßä –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç:", event.candidate);
        socket.emit("ice-candidate", { callId, candidate: event.candidate });
      }
    };

    pc.ontrack = (event) => {
      console.log("üì• –û—Ç—Ä–∏–º–∞–Ω–æ remote track:", event.track.kind);
      event.streams[0].getTracks().forEach((track) => {
        stream.addTrack(track);
      });
      remoteVideoRef.current.srcObject = stream;
      setIsRemoteConnected(true);
    };

    socket.on("user-joined", async ({ socketId }) => {
      console.log("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è:", socketId);
      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);
      console.log("üì® –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ offer:", offer);
      socket.emit("offer", { callId, offer });
    });

    socket.on("user-left", ({ socketId }) => {
      console.log("üö™ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤ –∑ –∫—ñ–º–Ω–∞—Ç–∏:", socketId);
      toast.info("–û–ø–æ–Ω–µ–Ω—Ç –∑–∞–ª–∏—à–∏–≤ –∫—ñ–º–Ω–∞—Ç—É");

      remoteStream?.getTracks().forEach((track) => {
        remoteStream.removeTrack(track);
      });
      if (remoteVideoRef.current) {
        remoteVideoRef.current.srcObject = null;
      }

      setIsRemoteConnected(false);
    });
    socket.on("offer", async ({ offer, from }) => {
      console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ offer –≤—ñ–¥:", from);
      await pc.setRemoteDescription(new RTCSessionDescription(offer));
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      console.log("üì® –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ answer:", answer);
      socket.emit("answer", { callId, answer });
    });

    socket.on("answer", async ({ answer }) => {
      console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ answer");
      await pc.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on("ice-candidate", async ({ candidate }) => {
      try {
        console.log("üì¨ –û—Ç—Ä–∏–º–∞–Ω–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç:", candidate);
        await pc.addIceCandidate(new RTCIceCandidate(candidate));
      } catch (err) {
        console.error("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è ICE:", err);
      }
    });

    start();

    return () => {
      console.log("üö´ –í–∏—Ö—ñ–¥ —ñ–∑ –∫—ñ–º–Ω–∞—Ç–∏");
      localStream?.getTracks().forEach((track) => {
        track.stop();
        console.log(`üõë –ó—É–ø–∏–Ω–µ–Ω–æ —Ç—Ä–µ–∫: ${track.kind}`);
      });

      pc.close();
      socket.emit("leave-room", { callId });
      socket.off("user-joined");
      socket.off("user-left");
      socket.off("offer");
      socket.off("answer");
      socket.off("ice-candidate");
    };
  }, [currentRole, callId]);

  const leaveRoom = () => {
    navigate("/");
  };

  const toggleMic = () => {
    const track = localStream?.getAudioTracks()[0];
    if (track) {
      track.enabled = !track.enabled;
      setMicEnabled(track.enabled);
      console.log(`üéôÔ∏è –ú—ñ–∫—Ä–æ—Ñ–æ–Ω: ${track.enabled ? "–£–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–í–∏–º–∫–Ω–µ–Ω–æ"}`);
    }
  };

  const toggleCamera = () => {
    const track = localStream?.getVideoTracks()[0];
    if (track) {
      track.enabled = !track.enabled;
      setCameraEnabled(track.enabled);
      console.log(`üì∑ –ö–∞–º–µ—Ä–∞: ${track.enabled ? "–£–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–í–∏–º–∫–Ω–µ–Ω–æ"}`);
    }
  };

  return (
    <div className={styles.container}>
      <h2>–í—ñ–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—è</h2>
      <p>
        –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å –¥–æ –∫—ñ–º–Ω–∞—Ç–∏: <strong>{callId}</strong>
      </p>

      <div className={styles.videoContainer}>
        <div>
          <p>–í–∏ ({currentRole})</p>
          <video
            ref={localVideoRef}
            autoPlay
            muted
            playsInline
            className={styles.video}
          />
        </div>
        <div>
          <p>–û–ø–æ–Ω–µ–Ω—Ç</p>
          {isRemoteConnected ? (
            <video
              ref={remoteVideoRef}
              autoPlay
              playsInline
              className={styles.video}
            />
          ) : (
            <div className={styles.placeholder}>
              –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–ø–æ–Ω–µ–Ω—Ç–∞...
            </div>
          )}
        </div>
      </div>

      <div className={styles.controls}>
        <button onClick={toggleMic}>
          {micEnabled ? "üîá –í–∏–º–∫–Ω—É—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω" : "üéôÔ∏è –£–≤—ñ–º–∫–Ω—É—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω"}
        </button>
        <button onClick={toggleCamera}>
          {cameraEnabled ? "üì∑ –í–∏–º–∫–Ω—É—Ç–∏ –∫–∞–º–µ—Ä—É" : "üìπ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∫–∞–º–µ—Ä—É"}
        </button>
        <button onClick={leaveRoom} className={styles.leaveButton}>
          üö™ –í–∏–π—Ç–∏ –∑ –∫—ñ–º–Ω–∞—Ç–∏
        </button>
      </div>
    </div>
  );
};

export default VideoRoom;
