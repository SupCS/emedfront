import { useEffect, useState } from "react";
import { getChatMessages } from "../../api/chatApi";
import {
  socket,
  connectSocket,
  joinChat,
  sendMessageSocket,
} from "../../api/socket";
import styles from "./ChatWindow.module.css";

const ChatWindow = ({ chat, currentUser }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    if (!chat || !currentUser) return;

    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ WebSocket (–ª–∏—à–µ —è–∫—â–æ —â–µ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ)
    if (!socket.connected) {
      console.log("üü¢ Connecting WebSocket...");
      connectSocket();
    }

    // –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è–º –¥–æ —á–∞—Ç—É
    socket.on("connect", () => {
      console.log(`‚úÖ WebSocket connected! Joining chat ${chat._id}`);
      joinChat(chat._id);
    });

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    const fetchMessages = async () => {
      try {
        const data = await getChatMessages(chat._id);
        console.log("üîµ Messages fetched:", data);
        setMessages(data);
      } catch (err) {
        setError(err.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.");
      }
    };

    fetchMessages();

    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const handleReceiveMessage = (message) => {
      console.log("üü¢ New message received:", message);
      if (String(message.chat) === String(chat._id)) {
        setMessages((prev) => [...prev, message]);
      }
    };

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —Å–ª—É—Ö–∞—á
    console.log("üîµ Subscribing to receiveMessage...");
    socket.on("receiveMessage", handleReceiveMessage);

    return () => {
      console.log("üî¥ Unsubscribing from receiveMessage...");
      socket.off("receiveMessage", handleReceiveMessage);
    };
  }, [chat, currentUser]);

  const handleSendMessage = () => {
    if (!newMessage.trim()) return;

    console.log("üîµ Sending message...");
    sendMessageSocket(chat._id, newMessage);
    setNewMessage("");
  };

  if (!chat) return <p className={styles.noChatSelected}>–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Ç</p>;

  return (
    <div className={styles.chatWindow}>
      <h3>–ß–∞—Ç –∑ {chat.participants.map((p) => p.name).join(", ")}</h3>
      <div className={styles.messages}>
        {messages.map((msg) => (
          <div key={msg._id} className={styles.message}>
            <strong>{msg.sender?.name || "–ê–Ω–æ–Ω—ñ–º"}:</strong> {msg.content}
          </div>
        ))}
      </div>
      <div className={styles.inputArea}>
        <input
          type="text"
          placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
        />
        <button onClick={handleSendMessage}>–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏</button>
      </div>
      {error && <p className={styles.error}>{error}</p>}
    </div>
  );
};

export default ChatWindow;
