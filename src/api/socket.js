import { io } from "socket.io-client";
import { store } from "../store";
import { addNotification } from "../store/notificationsSlice";

const SOCKET_URL = "http://localhost:5000";

export const socket = io(SOCKET_URL, {
  auth: {
    token: localStorage.getItem("authToken"),
  },
  autoConnect: false,
});

export const connectSocket = () => {
  const token = localStorage.getItem("authToken");

  if (!token) {
    console.log("üî¥ No auth token found, cannot connect to WebSocket.");
    return;
  }

  if (!socket.connected) {
    socket.auth.token = token;
    socket.connect();
    console.log("üü¢ WebSocket connected");

    socket.on("receiveMessage", (message) => {
      console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é receiveMessage!", message);

      const currentChatId = localStorage.getItem("currentChatId");
      console.log("üìå –ü–æ—Ç–æ—á–Ω–∏–π –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —á–∞—Ç:", currentChatId);

      if (String(message.chat) !== String(currentChatId)) {
        console.log("üîî –í–∏–∫–ª–∏–∫–∞—î–º–æ store.dispatch(addNotification)");

        store.dispatch(
          addNotification({
            id: message._id,
            chatId: message.chat,
            senderName: message.senderName,
            content: message.content,
            type: "chat",
          })
        );

        console.log("‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Redux");
      } else {
        console.log(
          "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É, —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ."
        );
      }
    });

    socket.on(
      "appointmentStart",
      ({ message, appointmentId, chatId, firestoreCallId }) => {
        console.log("üìÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø—Ä–∏–π–æ–º—É:", {
          message,
          appointmentId,
          chatId,
          firestoreCallId,
        });

        console.log("üì• –û–±—Ä–æ–±–ª—è—î–º–æ appointmentStart –ø–æ–¥—ñ—é!");
        console.log("üîª –î–∞–Ω—ñ:", {
          message,
          appointmentId,
          chatId,
          firestoreCallId,
        });

        store.dispatch(
          addNotification({
            id: `appt-${appointmentId}`,
            chatId,
            senderName: "–°–∏—Å—Ç–µ–º–∞",
            content: message,
            type: "appointment",
            firestoreCallId,
          })
        );
      }
    );

    socket.on("connect_error", (err) => {
      console.error("üî¥ –ü–æ–º–∏–ª–∫–∞ WebSocket:", err);
    });

    socket.onAny((event, ...args) => {
      console.log(`üì° –ü–æ–¥—ñ—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞: ${event}`, args);
    });
  }
};

export const disconnectSocket = () => {
  if (socket.connected) {
    socket.disconnect();
    console.log("üî¥ WebSocket disconnected");
  }
};

export const sendMessageSocket = (chatId, content, recipientId) => {
  if (socket.connected) {
    console.log(
      `üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: chatId=${chatId}, recipientId=${recipientId}, content="${content}"`
    );
    socket.emit("sendMessage", { chatId, content, recipientId });
  } else {
    console.error("üî¥ WebSocket is not connected");
  }
};

// –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–æ–∫–µ—Ç, —è–∫—â–æ —î —Ç–æ–∫–µ–Ω (—â–æ–± –Ω–µ –≤—Ç—Ä–∞—á–∞—Ç–∏ –∑–≤‚Äô—è–∑–æ–∫ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏)
if (localStorage.getItem("authToken")) {
  connectSocket();
}
