// üìÑ socket.js
import { io } from "socket.io-client";
import { store } from "../store";
import { addNotification } from "../store/notificationsSlice";
import { incrementUnreadMessages } from "../store/unreadMessagesSlice";
import { incrementUnreadForChat } from "../store/chatListSlice";
import { addMessageToActiveChat } from "../store/activeChatMessagesSlice";

const SOCKET_URL = "http://localhost:5000";

export const socket = io(SOCKET_URL, {
  auth: {
    token: localStorage.getItem("authToken"),
  },
  autoConnect: false,
});

export const connectSocket = () => {
  const token = localStorage.getItem("authToken");

  if (!token) {
    console.log("üî¥ No auth token found, cannot connect to WebSocket.");
    return;
  }

  // üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω
  socket.auth.token = token;

  // üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  if (!socket.connected) {
    socket.connect();
    console.log("üü¢ WebSocket connected");
  }

  // üí¨ –ü–æ–¥—ñ—è –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  socket.off("receiveMessage"); // –æ—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ
  socket.on("receiveMessage", (message) => {
    console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é receiveMessage!", message);

    const currentChatId = localStorage.getItem("currentChatId");
    console.log("üìå –ü–æ—Ç–æ—á–Ω–∏–π –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —á–∞—Ç:", currentChatId);

    if (String(message.chat) === String(currentChatId)) {
      console.log("üí¨ –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç");
      store.dispatch(addMessageToActiveChat(message));
      // –ù–µ –ø—ñ–¥–≤–∏—â—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
    } else {
      console.log(
        "üîî –ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ —ñ –¥–æ–¥–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
      );
      store.dispatch(
        addNotification({
          id: message._id,
          chatId: message.chat,
          senderName: message.senderName,
          content: message.content,
          type: "chat",
        })
      );
      store.dispatch(incrementUnreadMessages());
      store.dispatch(incrementUnreadForChat(message.chat));
    }
  });

  // üìÖ –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–∏–π–æ–º—É
  socket.off("appointmentStart");
  socket.on(
    "appointmentStart",
    ({ message, appointmentId, chatId, firestoreCallId }) => {
      console.log("üìÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –ø—Ä–∏–π–æ–º—É:", {
        message,
        appointmentId,
        chatId,
        firestoreCallId,
      });

      store.dispatch(
        addNotification({
          id: `appt-${appointmentId}`,
          chatId,
          senderName: "–°–∏—Å—Ç–µ–º–∞",
          content: message,
          type: "appointment",
          firestoreCallId,
        })
      );
    }
  );

  socket.off("connect_error");
  socket.on("connect_error", (err) => {
    console.error("üî¥ –ü–æ–º–∏–ª–∫–∞ WebSocket:", err);
  });

  socket.offAny(); // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ onAny
  socket.onAny((event, ...args) => {
    console.log(`üì° –ü–æ–¥—ñ—è –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞: ${event}`, args);
  });
};

export const disconnectSocket = () => {
  if (socket.connected) {
    socket.disconnect();
    console.log("üî¥ WebSocket disconnected");
  }
};

export const sendMessageSocket = (chatId, content, recipientId) => {
  if (socket.connected) {
    console.log(
      `üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: chatId=${chatId}, recipientId=${recipientId}, content="${content}"`
    );
    socket.emit("sendMessage", { chatId, content, recipientId });
  } else {
    console.error("üî¥ WebSocket is not connected");
  }
};

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —î —Ç–æ–∫–µ–Ω
if (localStorage.getItem("authToken")) {
  connectSocket();
}
